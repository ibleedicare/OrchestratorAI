Response: Here the current code I have let's make it better 

filename: rpg_game_v3.py

Code:

import random

class Player:
    def __init__(self, name, hp=20, dmg=5, character_class=None):
        self.name = name
        self.hp = hp
        self.dmg = dmg
        self.inventory = {}
        self.character_class = character_class

    def attack(self, enemy):
        enemy.hp -= self.dmg
        print(f"{self.name} hits {enemy.name} for {self.dmg} dmg.")
        if enemy.hp <= 0:
            print(f"{enemy.name} has died.")
            if enemy.name == "Dragon":
                print(f"{self.name} wins the game!")
                return "WIN"
            return "VICTORY"
        return "CONTINUE"


class Enemy:
    def __init__(self, name, hp, dmg):
        self.name = name
        self.hp = hp
        self.dmg = dmg

    def attack(self, player):
        player.hp -= self.dmg
        print(f"{self.name} hits {player.name} for {self.dmg} dmg.")
        if player.hp <= 0:
            print(f"{player.name} has died.")
            return "GAME OVER"
        return "CONTINUE"


class Item:
    def __init__(self, name):
        self.name = name


class Potion(Item):
    def __init__(self, name="Potion", restore_hp=5):
        super().__init__(name)
        self.restore_hp = restore_hp

    def use(self, player):
        player.hp += self.restore_hp
        print(f"{player.name} restores {self.restore_hp} HP with {self.name}.")


class Quest:
    def __init__(self, name, description, reward):
        self.name = name
        self.description = description
        self.reward = reward
        self.completed = False

    def start(self):
        print(f"You start the quest {self.name}. {self.description}")

    def complete(self, player):
        if not self.completed:
            self.completed = True
            print(f"You completed the quest {self.name}! {self.reward} has been added to your inventory.")
            if self.reward in player.inventory:
                player.inventory[self.reward] += 1
            else:
                player.inventory[self.reward] = 1


class CharacterClass:
    def __init__(self, name, hp_modifier, dmg_modifier):
        self.name = name
        self.hp_modifier = hp_modifier
        self.dmg_modifier = dmg_modifier


def choose_character_class():
    character_classes = [
        CharacterClass("Fighter", hp_modifier=2, dmg_modifier=2),
        CharacterClass("Rogue", hp_modifier=1, dmg_modifier=3),
        CharacterClass("Magic-User", hp_modifier=1, dmg_modifier=2),
    ]
    print("Choose your character class:")
    for i, char_class in enumerate(character_classes):
        print(f"[{i+1}] {char_class.name}")
    selection = input()
    while not selection.isnumeric() or int(selection) not in range(1, len(character_classes)+1):
        print("Invalid selection. Please choose again.")
        selection = input()
    return character_classes[int(selection)-1]


def battle(player, enemy):
    print(f"{player.name} challenges {enemy.name} to a battle!")
    while True:
        if player.attack(enemy) == "VICTORY":
            if enemy.name == "Goblin":
                potion = Potion()
                print(f"{enemy.name} drops {potion.name}! You add it to your inventory.")
                if potion.name in player.inventory:
                    player.inventory[potion.name] += 1
                else:
                    player.inventory[potion.name] = 1
            elif enemy.name == "Slime":
                print("You found a hidden treasure!")
                quest = Quest("Undead Secret", "Find the undead sorcerer in the forest and defeat him.", "Magic Orb")
                quest.start()
                return quest
            elif enemy.name == "Dragon":
                return "WIN"

            player.hp += round(player.hp * 0.2)  # additional 20% HP after winning a battle
            return "VICTORY"
        if enemy.attack(player) == "GAME OVER":
            return "GAME OVER"


def explore(player):
    event = random.choice(["goblin", "slime", "dragon"])
    if event == "goblin":
        enemy = Enemy("Goblin", 10, 3)
        return battle(player, enemy)

    elif event == "slime":
        enemy = Enemy("Slime", 7, 2)
        return battle(player, enemy)

    else:
        enemy = Enemy("Dragon", 20, 5)
        return battle(player, enemy)


def use_item(player, item_name):
    if item_name in player.inventory:
        item = player.inventory[item_name]
        if isinstance(item, Item):
            item.use(player)
            player.inventory[item_name] -= 1
            if not player.inventory[item_name]:
                del player.inventory[item_name]
        else:
            print(f"You cannot use {item_name}.")
    else:
        print(f"You do not have {item_name}.")


def show_inventory(player):
    if not player.inventory:
        print("Your inventory is empty.")
    else:
        print("Current Inventory:")
        for item in player.inventory:
            print(f"{item}: {player.inventory[item]}")


def main():
    player_name = input("Enter your name: ")
    character_class = choose_character_class()
    player = Player(player_name, character_class=character_class)

    print(f"\nWelcome, {player_name}. You have chosen the {player.character_class.name} class.")

    while True:
        action = input("Do you want to explore? (y/n) ").lower()
        if action != "y":
            print(f"{player.name} leaves the game.")
            break

        result = explore(player)

        if isinstance(result, Quest):
            result.complete(player)

        elif result == "WIN":
            break

    while True:
        command = input("Enter a command (explore, use, inventory, exit): ")
        if command == "explore":
            result = explore(player)

            if isinstance(result, Quest):
                result.complete(player)

            elif result == "WIN":
                break

        elif command == "use":
            item_name = input("Enter an item to use: ").title()
            use_item(player, item_name)

        elif command == "inventory":
            show_inventory(player)

        elif command == "exit":
            print(f"{player.name} leaves the game.")
            break

        else:
            print("Invalid command.")


if __name__ == "__main__":
    main()
